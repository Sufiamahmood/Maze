import pygame
import random
import sys
import time

# Initialize Pygame
pygame.init()

# Screen dimensions
width, height = 500, 500
cols, rows = 25, 25  # Ensure cols and rows are odd numbers for a perfect maze
cell_size = width // cols
player_x, player_y = 1, 1
exit_x, exit_y = cols - 2, rows - 2  # Exit position on the right edge of the maze

# Set up display
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Maze Navigation Game")

# Colors
WHITE = (255, 255, 255)
LILAC = (164, 91, 170)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)

# Initialize the maze grid
maze = [[0 for _ in range(cols)] for _ in range(rows)]

# Directions
UP = (0, -1)
DOWN = (0, 1)
LEFT = (-1, 0)
RIGHT = (1, 0)

# Timer variables
start_time = None
level_time_limit = 60  # Time limit for each level in seconds

# Function to start timer
def start_timer():
    global start_time
    start_time = time.time()

# Function to check if time limit exceeded
def is_time_up():
    global start_time
    if start_time is None:
        return False
    return time.time() - start_time >= level_time_limit

# Function to draw the timer on screen
def draw_timer():
    if start_time is not None:
        current_time = int(time.time() - start_time)
        time_left = max(0, level_time_limit - current_time)
        font = pygame.font.Font(None, 36)
        text = font.render(f"Time Left: {time_left}", True, GREEN)
        screen.blit(text, (10, 10))

def is_valid_move(x, y):
    if 0 <= x < cols and 0 <= y < rows and maze[y][x] == 0:
        return True
    return False

def carve_passages_from(current_x, current_y):
    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]
    random.shuffle(directions)
    for direction in directions:
        new_x = current_x + direction[0] * 2
        new_y = current_y + direction[1] * 2
        if is_valid_move(new_x, new_y):
            maze[current_y + direction[1]][current_x + direction[0]] = 1
            maze[new_y][new_x] = 1
            carve_passages_from(new_x, new_y)

def generate_maze():
    start_x, start_y = 1, 1
    maze[start_y][start_x] = 1
    carve_passages_from(start_x, start_y)
    # Ensure there's a clear path from start to exit
    maze[exit_y][exit_x] = 1
    maze[exit_y - 1][exit_x] = 1

def draw_maze():
    for y in range(rows):
        for x in range(cols):
            if (x, y) == (player_x, player_y):
                pygame.draw.rect(screen, BLUE, pygame.Rect(x * cell_size, y * cell_size, cell_size, cell_size))
            elif (x, y) == (exit_x, exit_y):
                pygame.draw.rect(screen, GREEN, pygame.Rect(x * cell_size, y * cell_size, cell_size, cell_size))
            else:
                color = WHITE if maze[y][x] == 1 else LILAC
                pygame.draw.rect(screen, color, (x * cell_size, y * cell_size, cell_size, cell_size))

    # Draw timer
    draw_timer()

def move_player(dx, dy):
    global player_x, player_y
    new_x, new_y = player_x + dx, player_y + dy
    if 0 <= new_x < cols and 0 <= new_y < rows and maze[new_y][new_x] == 1:
        player_x, player_y = new_x, new_y

def handle_keys(key):
    if key == pygame.K_UP:
        move_player(*UP)
    elif key == pygame.K_DOWN:
        move_player(*DOWN)
    elif key == pygame.K_LEFT:
        move_player(*LEFT)
    elif key == pygame.K_RIGHT:
        move_player(*RIGHT)

def main():
    global start_time, level_time_limit, player_x, player_y

    level = 1
    generate_maze()
    start_timer()
    clock = pygame.time.Clock()
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                handle_keys(event.key)

        screen.fill(LILAC)
        draw_maze()

        # Check if player has reached the exit
        if player_x == exit_x and player_y == exit_y:
            font = pygame.font.Font(None, 72)
            text = font.render("YOU WON!", True, GREEN)
            text_rect = text.get_rect(center=(width // 2, height // 2))
            screen.blit(text, text_rect)
            pygame.display.flip()
            pygame.time.wait(2000)  # Pause for 2 seconds
            level += 1
            generate_maze()
            start_timer()
            player_x, player_y = 1, 1  # Reset player position

        pygame.display.flip()

        # Check if time is up
        if is_time_up():
            print(f"Level {level} time's up!")
            # Reset player position and regenerate maze for next level
            player_x, player_y = 1, 1
            level += 1
            generate_maze()
            start_timer()

        clock.tick(30)

    pygame.quit()
    sys.exit()

if __name__ == "__main__":
    main()
